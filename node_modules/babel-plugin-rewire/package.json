{
  "_args": [
    [
      {
        "raw": "babel-plugin-rewire@https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
        "scope": null,
        "escapedName": "babel-plugin-rewire",
        "name": "babel-plugin-rewire",
        "rawSpec": "https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
        "spec": "https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
        "type": "remote"
      },
      "/home/nadiatrigo/code/migracao-minha-oi"
    ]
  ],
  "_from": "babel-plugin-rewire@>=1.0.0-beta-5 <2.0.0",
  "_id": "babel-plugin-rewire@1.0.0-rc-2",
  "_inCache": true,
  "_location": "/babel-plugin-rewire",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-rewire@https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
    "scope": null,
    "escapedName": "babel-plugin-rewire",
    "name": "babel-plugin-rewire",
    "rawSpec": "https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
    "spec": "https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
  "_shasum": "12b5695c32a10af4d45665b7af1b4ce31e760d14",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-rewire@https://registry.npmjs.org/babel-plugin-rewire/-/babel-plugin-rewire-1.0.0-rc-2.tgz",
  "_where": "/home/nadiatrigo/code/migracao-minha-oi",
  "author": {
    "name": "r.binna@synedra.com"
  },
  "bugs": {
    "url": "https://github.com/speedskater/babel-plugin-rewire/issues"
  },
  "contributors": [
    {
      "name": "Robert Binna",
      "email": "r.binna@synedra.com"
    },
    {
      "name": "Peet Goddard"
    },
    {
      "name": "Eli White",
      "email": "github@eli-white.com"
    },
    {
      "name": "Philip Spitzlinger",
      "email": "p.spitzlinger@synedra.com"
    },
    {
      "name": "Gustaf Dalemar"
    }
  ],
  "dependencies": {},
  "description": "A babel plugin adding the ability to rewire module dependencies. This enables to mock modules for testing purposes.",
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-plugin-syntax-async-functions": "^6.1.18",
    "babel-plugin-syntax-flow": "^6.1.18",
    "babel-plugin-syntax-jsx": "^6.3.13",
    "babel-plugin-transform-es2015-block-scoping": "^6.1.18",
    "babel-plugin-transform-es2015-template-literals": "^6.1.18",
    "babel-plugin-transform-es2015-typeof-symbol": "^6.1.18",
    "babel-plugin-transform-export-extensions": "^6.5.0",
    "babel-plugin-transform-react-jsx": "^6.3.13",
    "babel-plugin-transform-regenerator": "^6.1.18",
    "babel-plugin-transform-runtime": "^6.1.18",
    "babel-polyfill": "^6.2.0",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-react": "^6.1.18",
    "babel-runtime": "^5.8.23",
    "core-js": "^1.0.0",
    "expect.js": "^0.3.1",
    "mocha": "^2.2.4",
    "node-hook": "^0.1.0",
    "react": "^0.14.3",
    "react-dom": "^0.14.3"
  },
  "homepage": "https://github.com/speedskater/babel-plugin-rewire#readme",
  "keywords": [
    "babel",
    "plugin",
    "rewire",
    "es6",
    "modules"
  ],
  "license": "ISC",
  "main": "lib/babel-plugin-rewire.js",
  "name": "babel-plugin-rewire",
  "optionalDependencies": {},
  "peerDependencies": {
    "babel-core": "^6.0.0",
    "babel-template": "^6.2.0",
    "babel-types": "^6.2.0"
  },
  "publishConfig": {
    "registry": "http://registry.npmjs.org/"
  },
  "readme": "# babel-plugin-rewire\n\n\n\nA Babel plugin that adds the ability to rewire module dependencies.\n\n[![Build Status](https://travis-ci.org/speedskater/babel-plugin-rewire.svg)](https://travis-ci.org/speedskater/babel-plugin-rewire) [![Join the chat at https://gitter.im/speedskater/babel-plugin-rewire](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/speedskater/babel-plugin-rewire?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nIt is inspired by [rewire.js](https://github.com/jhnns/rewire) and transfers its concepts to es6 using babel.\n\nIt is useful for writing tests, specifically to mock the dependencies of the module under test.\n\nTherefore for each module it adds and exports the methods `__GetDependency__`, `__Rewire__`, and `__ResetDependency__`.\nFor compatibility reasons with rewire.js, the methods `__get__` and `__set__` are exported as well.\nThese methods allow you to rewire the module under test.\nFurthermore in case of a default export these methods are assigned to the existing default export, except for default exports of primitive types (boolean, number, string, ...).\n\nAn additional object named `__RewireAPI__` is exported as named export as well as a property of the default export. This object itself contains all the functions mentioned above as fields. This enables one to rewire members of the imported module itself without explicitly importing the module (see [Handling of default exports](#handling-of-default-exports) below).\n\n##ES6 Imports and React\n\nDependencies from import statements can be rewired\n\n###Example\n\n```javascript\nimport ChildComponent from 'child-component-module';\n\nexport default class MyFancyWrapperComponent extends React.Component {\n\n\trender() {\n\t\treturn (<div className=\"wrapper-style\">\n\t\t\t<ChildComponent {...this.props} />\n\t\t</div>);\n\t}\n}\n```\n\n### Test Code\n\n```javascript\nimport ComponentToTest from 'my-fancy-wrapper-component-module';\n\nComponentToTest.__Rewire__('ChildComponent', React.createClass({\n    render: function() { return <div {...this.props}></div>; }\n}));\n....\n\nComponentToTest.__ResetDependency__('ChildComponent');\n```\n\n##Node/browserify require() and top-level var support\n\nVariables declared and initialised at the top level, such as those from require() calls, can be rewired\n\n###Example\n\n```javascript\nvar Path = require('path');\n\nvar env = 'production';\n\nmodule.exports = function(name) {\n\treturn Path.normalise(name);\n}\n```\n\n### Test Code\n\n```javascript\nvar Normaliser = require('Normaliser');\n\nNormaliser.__Rewire__('Path', {\n  normalise: (name) => name;\n});\n\nNormaliser.__Rewire__('env', 'testing');\n....\n\nNormaliser.__ResetDependency__('Path');\n```\n\n## Named and top level function rewiring\n\nBesides top level variables also top level functions defined in the imported module can be rewired.\n\nWhen exported functions of a module depend on each other it can be convenient to test them independently.\nHence, babel-plugin-rewire allows you to rewire the internal dependencies to exported named functions as shown in the example below.\n\nBe aware, that rewiring a named export does not influence imports of that same export in other modules!\n\n### Example\nAsuming you have a module `TodoOperations.js` that internaly uses an asynchronous api to fetch some information\n```js\nfunction fetchToDos() {\n   ...\n   return new Promise(...);\n}\n\nexport function filterToDos( filterString ) {\n   return fetchToDos().then( function( todos ) {\n      // Highly fashioned filter function code ...\n      return filteredToDos;\n   });\n}\n\nexport function filterAndSortToDos( filterString, sortOrder ) {\n   return fetchToDos( filterString ).then( function( filteredToDos ) { \n      // Higly fashioned sort function\n      return filteredAndSortedToDos;\n   });\n}\n```\n\n### Test Code\nIn your test you can mock your API-calls to simply return static dummy data like this\n```js\nimport { filterToDos, filterAndSortToDos, __RewireAPI__ as ToDosRewireAPI } from 'TodoOperations.js';\n\ndescribe('api call mocking', function() {\n   it('should use the mocked api function', function(done) {\n      ToDosRewireAPI.__Rewire__('fetchToDos', function() {\n         return Promise.resolve(['Test more', 'Refine your tests', 'Tests first rocks']);\n      });\n      filterToDos('Test').then(function(filteredTodos) {\n         //check results\n         done();\n      }).catch((e) => fail());\n      ToDosRewireAPI.__ResetDependency__('fetchToDos');\n   });\n   \n   it('should use the mocked filter function', function(done) {\n      ToDosRewireAPI.__Rewire__('filterToDos', function() {\n         return Promise.resolve( ['02 Test more', '01 Test even more' ] );\n      });\n      filterAndSortToDos('Test', 'asc').then(function(filteredAndSortedTodos) {\n         //check results\n         done();\n      }).catch((e) => fail());\n      ToDosRewireAPI.__ResetDependency__('filterToDos');\n   });\n});\n```\n\n## Handling of default exports\n\nIf a non primitive default export is present in the imported module, it is enriched with the API-Functions and the API-Object.\nIf no default export is present, the API-Object named `__RewireAPI__` becomes the default export of the module.\n\nThis object basically supports all the rewire API-Functions as described in the introduction above and allows one to rewire the module without explicitly importing the module itself.\n\n### Example\nAsuming your imported module does not have a default export specified like in this simple example\n```js\nfunction message() {\n   return 'Hello world';\n}\n\nexport function foo() {\n   return message();\n}\n```\n\n### Test Code\nIn your test you would use the default exported API-Object to rewire the function `message` of the imported module like this\n```js\nimport FooModule from 'foo.js';\nimport { foo, __RewireAPI__ as FooModuleRewireAPI } from 'foo.js';\n\ndescribe('module default export test', function() {\n   it('should demonstrate the default exported rewire api', function() {\n      expect( foo() ).to.equal('Hello world');\n      FooModule.__Rewire__('message', function() {\n         return 'my message';\n      });\n      expect( foo() ).to.equal('my message');\n      FooModule.__ResetDependency__('message');\n   });\n   \n   it('should demonstrate the rewire apis named export', function() {\n      expect( foo() ).to.equal('Hello world');\n      FooModuleRewireAPI.__Rewire__('message', function() {\n         return 'my message';\n      });\n      expect( foo() ).to.equal('my message');\n      FooModuleRewireAPI.__ResetDependency__('message');\n   });\n});\n```\n\n## Handling of async functions\n\nRewiring of async functions works as one would expect using the same API as for other rewires for both default exports and named exports.\n\n### Example\nAssuming your imported module consists of the following.\n```js\n// api.js\nexport default async function asyncApiDefault() {\n   return await asyncApi();\n};\n\nexport async function asyncApi() {\n   return await api();\n};\n\nfunction api() {\n  // Some async API call\n  return Promise.resolve('API Response');\n};\n```\n\n### Test Code\nIn your test you would use the default exported API-Object to rewire the function `asyncApiDefault` and `asyncApi` of the imported module like this.\n```js\nimport { default as asyncApiDefault, asyncApi,  __RewireAPI__ as AsyncApiRewireAPI } from 'api.js';\ndescribe('async function export test', function() {\n it('should be able to rewire default async function', function() {\n    return asyncApiDefault().then(response => {\n      expect(response).to.equal('API Response');\n\n      AsyncApiRewireAPI.__set__('asyncApi', function() {\n        return Promise.resolve('Mock API Response');\n      });\n\n      return asyncApiDefault().then(response => {\n        expect(response).to.equal('Mock API Response');\n        AsyncApiRewireAPI.__ResetDependency__('asyncApi');\n      });\n    });\n  });\n\n  it('should be able to rewire non default async function', function() {\n    return asyncApi().then(response => {\n      expect(response).to.equal('API Response');\n\n      AsyncApiRewireAPI.__set__('api', function() {\n        return Promise.resolve('Mock API Response');\n      });\n\n      return asyncApi().then(response => {\n        expect(response).to.equal('Mock API Response');\n        AsyncApiRewireAPI.__ResetDependency__('api');\n      });\n    });\n  });\n});\n```\n\n## Installation\n\n```\n$ npm install babel babel-plugin-rewire\n```\n\n## Usage\n\nTo use the plugin identify it by its long name \"babel-plugin-rewire\" or by its abbreviation \"rewire\". In case you are using rewire.js in the same project you must use the unabbreviated plugin name. Otherwise babel is trying to load rewire.js as a plugin which will cause an [error](https://github.com/speedskater/babel-plugin-rewire/issues/5).\n\n###Commandline\nabbreviated:\n```\n$ babel --plugins rewire ..\n```\nfull plugin name:\n```\n$ babel --plugins babel-plugin-rewire ..\n```\n\n### With babelrc\n\nYou can also specify plugins via the [babelrc](http://babeljs.io/docs/usage/babelrc/) file:\n\n\n```json\n{\n  \"plugins\": [\"rewire\"]\n}\n```\n\nWhether you're using the command line, JS API, or require hook, this file is honored by babel.\n\n### JavaScript API\n\nabbreviated:\n```javascript\nrequire(\"babel\").transform(\"code\", { plugins: [\"rewire\"] });\n```\nfull plugin name:\n```javascript\nrequire(\"babel\").transform(\"code\", { plugins: [\"babel-plugin-rewire\"] });\n```\n\n### Require Hook\n```javascript\nrequire('babel/register')({\n  plugins: ['babel-plugin-rewire']\n})\n```\n\n### Webpack\n\nabbreviated:\n```javascript\n{test: /src\\/js\\/.+\\.js$/, loader: 'babel-loader?plugins=rewire' }\n```\nfull plugin name:\n```javascript\n{test: /src\\/js\\/.+\\.js$/, loader: 'babel-loader?plugins=babel-plugin-rewire' }\n```\n\n### Browserify/Babelify\n\nfull plugin name:\n```javascript\nvar appBundler = browserify({\n    entries: [test.src], // Only need initial file, browserify finds the rest\n}).transform(\n    babelify.configure({\n        plugins: [require('babel-plugin-rewire')]\n    })\n);\n```\n\n## Combining with other plugins/tools\n\n### [isparta](https://github.com/douglasduteil/isparta) \nThere are some things to consider when using babel-plugin-rewire together with isparta. Since isparta runs Babel itself it's important to remember to add the same configuration options to it as you would do with Babel. If you forget this you will in some cases see unexpected errors.\n\nIf you use _.babelrc_ it's advised that you run your tests with a specific ENV, for example \"test\", and add the following to your _.babelrc_.\n\n```json\n\"env\": {\n  \"test\": {\n    \"plugins\": [\"rewire\"]\n  }\n}\n```\n\nIf you are using isparta together with Webpack you could also do something like this.\n```javascript\nloader: 'isparta?{ babel: { plugins: [\"rewire\"] } }'\n```\n\n### istanbul\nInitially isparta was created to solve the problem of using istanbul with Babel. However work has been done recently on istanbul to support Babel generated code with sourcemaps.\n\nAt the moment of this writing this is still part of an alpha version (1.0.0-alpha.2, see [#212](https://github.com/gotwarlost/istanbul/issues/212#issuecomment-160526692) for details). You need to use the [sourcemaps option](http://babeljs.io/docs/usage/options/) with the `inline` value (see [this](https://github.com/istanbuljs/sample-babel-node/blob/master/.babelrc) for an example).\n\nBecause istanbul doesn't run babel by itself, you need to make sure that your code goes through babel. If you're running it through webpack it should be no different than what's shown on the [webpack](#webpack) section, but if you're running it through the node cli, you need to use [babel-node](http://babeljs.io/docs/usage/cli/#babel-node) and specify the plugin via the [cli argument](#commandline) or [babelrc](#with_babelrc).\n\nA small quirk is that you need to run the actual istanbul cli file, rather than the istanbul command, such as:\n\n```\nbabel-node ./node_modules/istanbul/lib/cli.js cover test/run-tests.js\n```\n\nSee the istanbul [sample-babel-node](https://github.com/istanbuljs/sample-babel-node) project for a full working example.\n\n## Examples projects\n* [es6-library-boilerplate](https://github.com/CurtisHumphrey/es6-library-boilerplate)\n\n## Release History\n\n* 0.1.0 Initial release\n* 0.1.1 Bugfix: moved to peer dependencies\n* 0.1.2 Added \\_\\_set\\_\\_ and \\_\\_get\\_\\_ to provide compatibility with rewire.js\n* 0.1.3 Added handling for the export of named declarations like classes or functions\n* 0.1.4 Fixed variable handling and used renaming of scope variables. Further removed global identifiers to prevent memory leaks.\n* 0.1.5 Fixed regression\n* 0.1.6 Support for rewiring top level variables. Added module.exports for non-es6 modules.\n* 0.1.7 Fixed regressions from 0.1.6.\n* 0.1.8 Ignores destructuring assignments to prevent errors.\n* 0.1.9 Removed issues with TDZ and es6.spec.blockScoping optional transformer.\n* 0.1.10 Fixed tests.\n* 0.1.11 Fixed issues with for-of loops.\n* 0.1.12 Updated Plugin Format.\n* 0.1.13 Changed rewire specific properties on default export to non-enumerable properties.\n* 0.1.14 Added handling for non-enumerable properties to commonjs support. Support for mixed es6 and commonjs support. Handling for primitive types.\n* 0.1.15 Added functionality to rewire functions. \n* 0.1.16 Fixed variable scope for rewired functions.\n* 0.1.17 Fixed variable scoping for var variable declarations.\n* 0.1.18 Fixed function scope for rewired functions.\n* 0.1.19 Removed debug statements.\n* 0.1.20 Added rewiring named exported functions and variables.\n* 0.1.21 Improved default export handling, fixed commonjs default exporting, fixed ast nodes resource leaks, improved README. \n* 0.1.22 Added support for asynchronous functions\n* 0.1.23-beta Improved flow compatibility, Added functionality to work with cyclic dependencies.\n* 1.0.0-beta-1 Added support for babel 6, added support for rewiring classes, added support for flow types, added support for rewire.js compatible \\__with\\__\n* 1.0.0-beta-2 Removed rewire of Object, require\n* 1.0.0-beta-3 Removed support for rewiring of globals. Added support for rewiring in combination with assignment and update expressions.\n* 1.0.0-beta-4 Updates jsx support in combination with babel 6 but has a regression\n* 1.0.0-beta-5 Fixes rewiring of jsx elements. Readme improvements. Test for pass-through like modules.\n* 1.0.0-rc-1 Fixes rewiring of switch statements. Readme improvements. Wildcard imports and tdz issues.\n* 1.0.0-rc-2 Fixes issues with babelify, React stateless functions as well as flow declarations.\n\n## Contributors\n\n[speedskater](https://github.com/speedskater) - author and creator of initial release\n[Peet](https://github.com/peet) - module.exports and top-level var support\n[TheSavior](https://github.com/TheSavior) - support for non-enumerable rewire properties\n[PSpSynedra](https://github.com/PSpSynedra) - support for named export and function rewiring and improvements of default imports \n[Gustaf Dalemar](https://github.com/DLMR) - support for asynchronous functions\n[Spencre Leichty](https://github.com/spncrlkt) - support for named wildcard exports\n[Zhanzhan He](https://github.com/zh3) - support for wildcard imports\n\n## License\n\nThe ISC License (ISC)\n\nCopyright (c) 2015, Robert Binna <r.binna@synedra.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/speedskater/babel-plugin-rewire.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "prepublish": "babel src --out-dir lib",
    "test": "mocha && ./node_modules/.bin/mocha usage-tests"
  },
  "version": "1.0.0-rc-2"
}
