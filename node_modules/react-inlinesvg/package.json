{
  "_args": [
    [
      {
        "raw": "react-inlinesvg@https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
        "scope": null,
        "escapedName": "react-inlinesvg",
        "name": "react-inlinesvg",
        "rawSpec": "https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
        "spec": "https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
        "type": "remote"
      },
      "/home/nadiatrigo/code/migracao-minha-oi"
    ]
  ],
  "_from": "react-inlinesvg@latest",
  "_id": "react-inlinesvg@0.5.3",
  "_inCache": true,
  "_location": "/react-inlinesvg",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-inlinesvg@https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
    "scope": null,
    "escapedName": "react-inlinesvg",
    "name": "react-inlinesvg",
    "rawSpec": "https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
    "spec": "https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
  "_shasum": "4dc58ba37867ff83f2ad5de8aca867d785dc8385",
  "_shrinkwrap": null,
  "_spec": "react-inlinesvg@https://registry.npmjs.org/react-inlinesvg/-/react-inlinesvg-0.5.3.tgz",
  "_where": "/home/nadiatrigo/code/migracao-minha-oi",
  "author": {
    "name": "Matthew Dapena-Tretter",
    "email": "m@tthewwithanm.com"
  },
  "babel": {
    "presets": [
      "es2015",
      "react",
      "stage-1"
    ],
    "plugins": [
      "add-module-exports"
    ]
  },
  "browserify": {
    "transform": [
      [
        "babelify",
        {
          "ignore": "/bower_components/",
          "sourceMapRelative": "."
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/matthewwithanm/react-inlinesvg/issues"
  },
  "dependencies": {
    "fbjs": "^0.8",
    "httpplease": "^0.16",
    "once": "^1.3"
  },
  "description": "An SVG loader for React",
  "devDependencies": {
    "babel-core": "^6.9",
    "babel-eslint": "^6.0",
    "babel-plugin-add-module-exports": "^0.2",
    "babel-plugin-rewire": "1.0.0-rc-3",
    "babel-preset-es2015": "^6.9",
    "babel-preset-react": "^6.5",
    "babel-preset-stage-1": "^6.5",
    "babel-register": "^6.9",
    "babelify": "^7.3.0",
    "browserify": "^13.0.1",
    "browserify-shim": "^3.8.12",
    "cors": "^2.7",
    "eslint": "^2.10",
    "eslint-config-airbnb": "^9.0",
    "eslint-plugin-import": "^1.7",
    "eslint-plugin-jsx-a11y": "^1.2",
    "eslint-plugin-react": "^5.1",
    "expect": "^1.20",
    "gulp": "^3.9",
    "gulp-babel": "^6.1",
    "gulp-bump": "^2.1.0",
    "gulp-connect": "^4.0",
    "gulp-load-plugins": "^1.2",
    "gulp-rename": "^1.2",
    "gulp-util": "^3.0",
    "jsdom": "^9.1",
    "mocha": "^2.4",
    "react": "^15.1",
    "react-addons-test-utils": "^15.1",
    "react-dom": "^15.1",
    "vinyl-source-stream": "^1.1.0"
  },
  "homepage": "https://github.com/matthewwithanm/react-inlinesvg#readme",
  "keywords": [
    "react-component",
    "react",
    "svg",
    "component"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "react-inlinesvg",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14 || ^15.0"
  },
  "readme": "react-inlinesvg\n===============\n<a href=\"https://www.npmjs.com/package/react-inlinesvg\" target=\"_blank\">![](https://badge.fury.io/js/react-inlinesvg.svg)</a>\n\nOne of the reasons SVGs are awesome is because you can style them with CSS.\nUnfortunately, this winds up not being too useful in practice because the style\nelement has to be in the same document. This leaves you with three bad options:\n\n1. Embed the CSS in the SVG document\n    * Can't use your CSS preprocessors (LESS, SASS)\n    * Can't target parent elements (button hover, etc.)\n    * Makes maintenance difficult\n2. Link to a CSS file in your SVG document\n    * Sharing styles with your HTML means duplicating paths across your project,\n      making maintenance a pain\n    * Not sharing styles with your HTML means extra HTTP requests (and likely\n      duplicating paths between different SVGs)\n    * Still can't target parent elements\n    * Your SVG becomes coupled to your external stylesheet, complicating reuse.\n3. Embed the SVG in your HTML\n    * Bloats your HTML\n    * SVGs can't be cached by browsers between pages.\n    * A maintenance nightmare\n\nBut there's an alternative that sidesteps these issues: load the SVG with an XHR\nrequest and then embed it in the document. That's what this component does.\n\n\n### Note\n\nThe SVG [`<use>`][svg-use] element can be used to achieve something similar to\nthis component. See [this article][use-article] for more information and [this\ntable][use-support] for browser support and caveats.\n\n\nUsage\n-----\n\n```\nvar Isvg = require('react-inlinesvg');\n\n<Isvg src=\"/path/to/myfile.svg\">\n  Here's some optional content for browsers that don't support XHR or inline\n  SVGs. You can use other React components here too. Here, I'll show you.\n  <img src=\"/path/to/myfile.png\" />\n</Isvg>\n```\n\n\nProps\n-----\n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>src</code></td>\n    <td>string</td>\n    <td>\n      The URL of the SVG file you want to load.\n    </td>\n  </tr>\n  <tr>\n    <td><code>wrapper</code></td>\n    <td>function</td>\n    <td>\n      A React class or other function that returns a component instance to be\n      used as the wrapper component. Defaults to <code>React.DOM.span</code>.\n    </td>\n  </tr>\n  <tr>\n    <td><code>preloader</code></td>\n    <td>function</td>\n    <td>\n      A React class or other function that returns a component instance to be\n      shown while the SVG is loaded.\n    </td>\n  </tr>\n  <tr>\n    <td><code>onLoad</code></td>\n    <td>function</td>\n    <td>\n      A callback to be invoked upon successful load.\n    </td>\n  </tr>\n  <tr>\n    <td><code>onError</code></td>\n    <td>function</td>\n    <td>\n      A callback to be invoked if loading the SVG fails. This will receive a\n      single argument: an instance of <code>InlineSVGError</code>, which has\n      the following properties:\n\n      <ul>\n        <li><code>isHttpError</code></li>\n        <li><code>isSupportedBrowser</code></li>\n        <li><code>isConfigurationError</code></li>\n        <li><code>statusCode</code> (present only if <code>isHttpError</code> is true)</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td><code>uniquifyIDs</code></td>\n    <td>boolean</td>\n    <td>\n      A boolean that tells Isvg to create unique IDs for each icon by hashing it. Default is <code>true</code> but you can alter the behaviour by setting the boolean to <code>false</code>.\n\n      <code>&lt;Isvg uniquifyIDs={false}&gt;&lt;/Isvg&gt;</code>\n    </td>\n  </tr>\n  <tr>\n    <td><code>cacheGetRequests</code></td>\n    <td>boolean</td>\n    <td>\n      A boolean that tells Isvg to only request svgs once. Default is <code>false</code> but you can alter the behaviour by setting the boolean to <code>true</code>.\n\n      <code>&lt;Isvg cacheGetRequests={true}&gt;&lt;/Isvg&gt;</code>\n    </td>\n  </tr>\n</table>\n\n\nBrowser Support\n---------------\n\nAny browsers that support inlining SVGs and XHR will work. The component goes out of its way to handle IE9's weird XHR support so, IE9 and up get your SVG;\nlesser browsers get the fallback.  \nWe use [httpplease](https://github.com/matthewwithanm/httpplease.js) for XHR requests.\n\nCORS\n----\n\nIf loading SVGs from another domain, you'll need to make sure it allows [CORS].\n\n\nXSS Warning\n-----------\n\nThis component places the loaded file into your DOM, so you need to be careful\nabout XSS attacks. Only load trusted content, and don't use unsanitized user\ninput to generate the `src`!\n\n\n[CORS](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)  \n[svg-use-external-source](http://css-tricks.com/svg-use-external-source)  \n[use-support](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use#Browser_compatibility)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/matthewwithanm/react-inlinesvg.git"
  },
  "scripts": {
    "build": "gulp build",
    "lint": "eslint -c ./.eslintrc $(find src -name '*.js')",
    "prepublish": "npm run build",
    "test": "gulp test-server & mocha --compilers js:babel-register; kill %1"
  },
  "version": "0.5.3"
}
