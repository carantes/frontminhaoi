{
  "_args": [
    [
      {
        "raw": "redux-logger@https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
        "scope": null,
        "escapedName": "redux-logger",
        "name": "redux-logger",
        "rawSpec": "https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
        "spec": "https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
        "type": "remote"
      },
      "/home/nadiatrigo/code/migracao-minha-oi"
    ]
  ],
  "_from": "redux-logger@>=1.0.9 <2.0.0",
  "_id": "redux-logger@1.0.9",
  "_inCache": true,
  "_location": "/redux-logger",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-logger@https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
    "scope": null,
    "escapedName": "redux-logger",
    "name": "redux-logger",
    "rawSpec": "https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
    "spec": "https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
  "_shasum": "144ff2c7c201a259ac71ca922b1ee215c9363478",
  "_shrinkwrap": null,
  "_spec": "redux-logger@https://registry.npmjs.org/redux-logger/-/redux-logger-1.0.9.tgz",
  "_where": "/home/nadiatrigo/code/migracao-minha-oi",
  "author": {
    "name": "Eugene Rodionov",
    "url": "https://github.com/theaqua"
  },
  "bugs": {
    "url": "https://github.com/fcomb/redux-logger/issues"
  },
  "dependencies": {},
  "description": "Logger for redux",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.8.24",
    "babel-eslint": "^4.1.2",
    "babel-loader": "^5.3.2",
    "eslint": "^1.4.3",
    "eslint-config-airbnb": "0.0.8",
    "eslint-plugin-react": "^3.4.2",
    "gh-pages": "^0.4.0",
    "rimraf": "^2.4.3",
    "webpack": "^1.12.1"
  },
  "homepage": "https://github.com/fcomb/redux-logger#readme",
  "keywords": [
    "redux",
    "logger",
    "redux-logger",
    "redux",
    "middleware"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "name": "redux-logger",
  "optionalDependencies": {},
  "readme": "# Logger for redux\n[![Build Status](https://travis-ci.org/fcomb/redux-logger.svg?branch=master)](https://travis-ci.org/fcomb/redux-logger)\n\n![logger](http://i.imgur.com/qhcz1OD.png)\n\n## Install\n`npm i --save redux-logger`\n\n## Usage\n```javascript\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise';\nimport createLogger from 'redux-logger';\n\nconst logger = createLogger();\nconst createStoreWithMiddleware = applyMiddleware(thunk, promise, logger)(createStore);\nconst store = createStoreWithMiddleware(reducer);\n```\nLogger **must be** last middleware in chain, otherwise it will log thunk and promise, not actual actions ([#20](https://github.com/fcomb/redux-logger/issues/20)).\n\n## API\n\n`redux-logger` exposes single constructor function for creating logger middleware.  \n\n__createLogger(options?: Object)__\n\n### Options\n\n#### __level (String)__\nLevel of `console`. `warn`, `error`, `info` or [else](https://developer.mozilla.org/en/docs/Web/API/console).\n\n*Default: `console.log`*\n\n#### __logger (Object)__\nImplementation of the `console` API. Useful if you are using a custom, wrapped version of `console`.\n\n*Default: `window.console`*\n\n#### __timestamp (Boolean)__\nPrint timestamp with each action?\n\n*Default: `true`*\n\n#### __duration (Boolean)__\nPrint duration of each action?\n\n*Default: `false`*\n\n#### __transformer (Function)__\nTransform state before print. Eg. convert Immutable object to plain JSON.\n\n*Default: identity function*\n\n#### __predicate (getState: Function, action: Object): boolean__\nIf specified this function will be called before each action is processed with this middleware.\nReceives `getState` function for  accessing current store state and `action` object as parameters. Returns `true` if action should be logged, `false` otherwise.\n\n*Default: `null` (always log)*\n\n#### __collapsed (getState: Function, action: Object): boolean__\nTakes a boolean or optionally a function that receives `getState` function for accessing current store state and `action` object as parameters. Returns `true` if the log group should be collapsed, `false` otherwise.\n\n*Default: `false`*\n\n##### Examples:\n###### log only in dev mode\n```javascript\nconst __DEV__ = true;\n\ncreateLogger({\n  predicate: (getState, action) => __DEV__\n});\n```\n\n###### log everything except actions with type `AUTH_REMOVE_TOKEN`\n```javascript\ncreateLogger({\n  predicate: (getState, action) => action.type !== AUTH_REMOVE_TOKEN\n});\n```\n\n###### collapse all actions\n```javascript\ncreateLogger({\n  collapsed: true\n});\n```\n\n###### collapse actions with type `FORM_CHANGE`\n```javascript\ncreateLogger({\n  collapsed: (getState, action) => action.type === FORM_CHANGE\n});\n```\n\n###### transform Immutable objects into JSON\n```javascript\ncreateLogger({\n  transformer: (state) => {\n    var newState = {};\n    for (var i of Object.keys(state)) {\n      if (Immutable.Iterable.isIterable(state[i])) {\n        newState[i] = state[i].toJS();\n      } else {\n        newState[i] = state[i];\n      }\n    };\n    return newState;\n  }\n});\n```\n\n\n### License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fcomb/redux-logger.git"
  },
  "scripts": {
    "build": "npm run build:module && npm run build:example",
    "build:example": "webpack -p --config example/webpack.config.production.js",
    "build:module": "babel src --out-dir build",
    "clean": "rimraf build",
    "deploy": "npm run build:example && git add -A && git commit -am 'chore: update build' && git push && npm run deploy:ghpages",
    "deploy:ghpages": "gh-pages -d example/dist",
    "lint": "eslint src",
    "prepublish": "npm run clean && npm run test && npm run build",
    "test": "npm run lint"
  },
  "version": "1.0.9"
}
